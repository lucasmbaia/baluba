// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package gossip

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Gossip struct {
	_tab flatbuffers.Table
}

func GetRootAsGossip(buf []byte, offset flatbuffers.UOffsetT) *Gossip {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Gossip{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Gossip) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Gossip) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Gossip) Option() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Gossip) Body(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Gossip) BodyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func GossipStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func GossipAddOption(builder *flatbuffers.Builder, Option flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(Option), 0)
}
func GossipAddBody(builder *flatbuffers.Builder, Body flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(Body), 0)
}
func GossipStartBodyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func GossipEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
