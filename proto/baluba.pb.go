// Code generated by protoc-gen-go.
// source: baluba.proto
// DO NOT EDIT!

/*
Package baluba is a generated protocol buffer package.

It is generated from these files:
	baluba.proto

It has these top-level messages:
	Chunk
	UploadStatus
*/
package baluba

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UploadStatusCode int32

const (
	UploadStatusCode_Unknown UploadStatusCode = 0
	UploadStatusCode_Ok      UploadStatusCode = 1
	UploadStatusCode_Failed  UploadStatusCode = 2
)

var UploadStatusCode_name = map[int32]string{
	0: "Unknown",
	1: "Ok",
	2: "Failed",
}
var UploadStatusCode_value = map[string]int32{
	"Unknown": 0,
	"Ok":      1,
	"Failed":  2,
}

func (x UploadStatusCode) String() string {
	return proto.EnumName(UploadStatusCode_name, int32(x))
}
func (UploadStatusCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Chunk struct {
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Chunk) Reset()                    { *m = Chunk{} }
func (m *Chunk) String() string            { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()               {}
func (*Chunk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Chunk) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Chunk) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UploadStatus struct {
	Message string           `protobuf:"bytes,1,opt,name=Message" json:"Message,omitempty"`
	Code    UploadStatusCode `protobuf:"varint,2,opt,name=Code,enum=baluba.UploadStatusCode" json:"Code,omitempty"`
}

func (m *UploadStatus) Reset()                    { *m = UploadStatus{} }
func (m *UploadStatus) String() string            { return proto.CompactTextString(m) }
func (*UploadStatus) ProtoMessage()               {}
func (*UploadStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UploadStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UploadStatus) GetCode() UploadStatusCode {
	if m != nil {
		return m.Code
	}
	return UploadStatusCode_Unknown
}

func init() {
	proto.RegisterType((*Chunk)(nil), "baluba.Chunk")
	proto.RegisterType((*UploadStatus)(nil), "baluba.UploadStatus")
	proto.RegisterEnum("baluba.UploadStatusCode", UploadStatusCode_name, UploadStatusCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BalubaService service

type BalubaServiceClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (BalubaService_UploadClient, error)
}

type balubaServiceClient struct {
	cc *grpc.ClientConn
}

func NewBalubaServiceClient(cc *grpc.ClientConn) BalubaServiceClient {
	return &balubaServiceClient{cc}
}

func (c *balubaServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (BalubaService_UploadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BalubaService_serviceDesc.Streams[0], c.cc, "/baluba.BalubaService/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &balubaServiceUploadClient{stream}
	return x, nil
}

type BalubaService_UploadClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*UploadStatus, error)
	grpc.ClientStream
}

type balubaServiceUploadClient struct {
	grpc.ClientStream
}

func (x *balubaServiceUploadClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *balubaServiceUploadClient) CloseAndRecv() (*UploadStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for BalubaService service

type BalubaServiceServer interface {
	Upload(BalubaService_UploadServer) error
}

func RegisterBalubaServiceServer(s *grpc.Server, srv BalubaServiceServer) {
	s.RegisterService(&_BalubaService_serviceDesc, srv)
}

func _BalubaService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BalubaServiceServer).Upload(&balubaServiceUploadServer{stream})
}

type BalubaService_UploadServer interface {
	SendAndClose(*UploadStatus) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type balubaServiceUploadServer struct {
	grpc.ServerStream
}

func (x *balubaServiceUploadServer) SendAndClose(m *UploadStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *balubaServiceUploadServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _BalubaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "baluba.BalubaService",
	HandlerType: (*BalubaServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _BalubaService_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "baluba.proto",
}

func init() { proto.RegisterFile("baluba.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x6b, 0x84, 0x30,
	0x10, 0x85, 0x37, 0xb2, 0xcd, 0xb2, 0x53, 0x2d, 0x61, 0xe8, 0x21, 0xf4, 0x24, 0x9e, 0xa4, 0x14,
	0xa1, 0x4a, 0xff, 0x80, 0x42, 0x6f, 0xa5, 0x10, 0xb1, 0xf7, 0xa8, 0xa1, 0x15, 0x6d, 0x22, 0x1a,
	0xdb, 0xbf, 0x5f, 0x8c, 0x15, 0x4a, 0xd9, 0x5b, 0x1e, 0x2f, 0xdf, 0x7b, 0x33, 0x03, 0x7e, 0x2d,
	0x87, 0xa5, 0x96, 0xc9, 0x38, 0x19, 0x6b, 0x90, 0x6e, 0x2a, 0x7a, 0x82, 0xab, 0xe2, 0x63, 0xd1,
	0x3d, 0x72, 0x38, 0x35, 0x46, 0x5b, 0xa5, 0x2d, 0x27, 0x21, 0x89, 0x7d, 0xb1, 0x4b, 0x44, 0x38,
	0x6a, 0xf9, 0xa9, 0xb8, 0x17, 0x92, 0xf8, 0x2c, 0xdc, 0x3b, 0x7a, 0x03, 0xbf, 0x1a, 0x07, 0x23,
	0xdb, 0xd2, 0x4a, 0xbb, 0xcc, 0x2b, 0xfd, 0xa2, 0xe6, 0x59, 0xbe, 0x2b, 0x47, 0x9f, 0xc5, 0x2e,
	0xf1, 0x01, 0x8e, 0x85, 0x69, 0x37, 0xfa, 0x26, 0xe5, 0xc9, 0xef, 0x14, 0x7f, 0xe9, 0xd5, 0x17,
	0xee, 0xd7, 0x7d, 0x06, 0xec, 0xbf, 0x83, 0xd7, 0x70, 0xaa, 0x74, 0xaf, 0xcd, 0xb7, 0x66, 0x07,
	0xa4, 0xe0, 0xbd, 0xf6, 0x8c, 0x20, 0x00, 0x7d, 0x96, 0xdd, 0xa0, 0x5a, 0xe6, 0xa5, 0x39, 0x04,
	0xb9, 0x4b, 0x2d, 0xd5, 0xf4, 0xd5, 0x35, 0x0a, 0x1f, 0x81, 0x6e, 0x29, 0x18, 0xec, 0x7d, 0x6e,
	0xc9, 0xbb, 0xdb, 0x4b, 0xf5, 0xd1, 0x21, 0x26, 0x35, 0x75, 0x67, 0xc9, 0x7e, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xc3, 0x1f, 0x5f, 0x1c, 0x26, 0x01, 0x00, 0x00,
}
